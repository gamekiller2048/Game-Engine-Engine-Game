#version 430 core
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D u_imgOutput;

uniform vec2 u_resolution;
uniform vec3 u_cameraPos;
uniform mat4 u_cameraProj;
uniform mat4 u_cameraView;
uniform vec3 u_lightPos;
uniform samplerCube u_background;
uniform float u_seed;
uniform int u_frameCount;

struct Ray {
	vec3 origin;
	vec3 dir;
};

const float PI = 3.1415926;

const int DIFFUSE = 0;
const int METALLIC = 1;
const int EMISSIVE = 2;

const int SPHERE = 0;

struct MetallicMaterial {
	vec3 albedo;
	float roughness;
};

struct DiffuseMaterial {
	vec3 albedo;
};

struct EmissiveMaterial {
	vec3 albedo;
	vec3 emission;
};

struct Sphere {
	vec3 origin;
	float radius;
};

struct Hittable
{
	uint type;
	uint index;
	uint matType;
	uint matIndex;
};

DiffuseMaterial diffuseMaterials[] = {
	DiffuseMaterial(vec3(1.0f, 0.0f, 0.0f)),
	DiffuseMaterial(vec3(1.0f))
};

MetallicMaterial metallicMaterials[] = {
	MetallicMaterial(vec3(0.0f, 0.0f, 1.0f), 0.0f),
	MetallicMaterial(vec3(1.0f, 1.0f, 0.5f), 0.1f)
};

EmissiveMaterial emissiveMaterials[] = {
	EmissiveMaterial(vec3(1.0f, 1.0f, 1.0f), vec3(5.0f, 5.0f, 5.0f))
};

Sphere spheres[] = {
	Sphere(vec3(0.0f, 0.0f, 0.0f), 0.3f),
	Sphere(vec3(0.7f, 0.0f, 0.0f), 0.3f),
	Sphere(vec3(0.0f, 1.5f, 0.0f), 0.1f),
	Sphere(vec3(0.0f, -11.4f, 0.0f), 11.0f),
	Sphere(vec3(-0.7f, 0.0f, 0.0f), 0.3f)
};

const int NUM_OBJECTS = 5;
Hittable objects[] = {
	Hittable(SPHERE, 0, DIFFUSE, 0),
	Hittable(SPHERE, 1, METALLIC, 0),
	Hittable(SPHERE, 2, EMISSIVE, 0),
	Hittable(SPHERE, 3, DIFFUSE, 1),
	Hittable(SPHERE, 4, METALLIC, 1),
};

const int NUM_EMISSIVE_OBJECTS = 1;
uint emissiveObjectIndexes[] = {
	2
};

float rand(float x) {
    return fract(sin(x + u_seed) * 43758.5453123);
}

vec2 randVec2(vec2 uv) {
    vec2 seed = uv + u_seed;

    return vec2(
        fract(sin(dot(seed, vec2(12.9898, 78.233))) * 43758.5453),
        fract(sin(dot(seed, vec2(39.3468, 11.135))) * 15731.7431)
    );
}

vec3 randVec3(vec2 uv) {
    vec2 seed = uv + u_seed;

    return vec3(
        fract(sin(dot(seed, vec2(12.9898, 78.233))) * 43758.5453),
        fract(sin(dot(seed, vec2(93.9898, 67.345))) * 24634.6345),
        fract(sin(dot(seed, vec2(45.332, 12.345))) * 56445.2345)
    );
}

vec3 randRangeVec3(vec2 uv, float min, float max) {
	vec3 base = randVec3(uv);
    return mix(vec3(min), vec3(max), base);
}

vec3 randHemisphere(vec2 uv, vec3 normal) {
    vec3 rand = randVec3(uv) * 2.0 - 1.0;
    rand = normalize(rand);

    if (dot(rand, normal) < 0.0)
        rand = -rand;

    return rand;
}

vec3 randHemisphereCosWeighted(vec2 uv, vec3 normal) {
	vec2 rand = randVec2(uv);

	// radius inside unit sphere
	float r = sqrt(rand.x);
	// scale theta [0, 2pi]
    float theta = 2.0 * PI * rand.y;
    
    // sample direction in tangent space
    float x = r * cos(theta);
    float y = r * sin(theta);
    float z = sqrt(1.0 - rand.x);
    
    // Build an orthonormal basis (TBN) around the normal
    vec3 tangent = normalize(abs(normal.x) > 0.1 ? cross(normal, vec3(0,1,0)) : cross(normal, vec3(1,0,0)));
    vec3 bitangent = cross(normal, tangent);
    
    // Transform sample to world space
    return normalize(x * tangent + y * bitangent + z * normal);
}

float hitSphere(inout Sphere sphere, inout Ray ray)
{
	vec3 origin = ray.origin - sphere.origin;

	float a = dot(ray.dir, ray.dir);
	float b = 2 * dot(origin, ray.dir);
	float c = dot(origin, origin) - sphere.radius * sphere.radius;

	float discriminant = b * b - 4.0f * a * c;

	if(discriminant < 0.0f)
		return -1.0f;

	return (-b - sqrt(discriminant)) / (2.0f * a); 
}

vec3 hitSphereNormal(inout Sphere sphere, vec3 hitPos)
{
	return normalize(hitPos - sphere.origin);
}

vec3 sampleSphereSurface(inout Sphere sphere)
{
	// around vertical axis [0, 2pi]
	float theta = 2.0 * PI * rand(0.02);
	// angle from the top [0, pi], is weighted by cos for uniform dist
	float phi = acos(1.0 - 2.0 * rand(0.03));

    return sphere.origin + sphere.radius * vec3(
		sin(phi) * cos(theta),
		sin(phi) * sin(theta),
		cos(phi)
	);
}

// GGX/TrowBridge-Reitz Normal Distribution
float D_GGX(float NdotH, float roughness) {
    float a = roughness * roughness;
    float a2 = a * a;
    float denom = (NdotH * NdotH) * (a2 - 1.0) + 1.0;
    return a2 / (PI * denom * denom);
}

// Geometry term: Schlick-GGX approximation for one direction
float G_SchlickGGX(float NdotV, float roughness) {
    float k = roughness / 2.0f;
	NdotV = max(NdotV, 0.001f);
    return NdotV / (NdotV * (1.0 - k) + k);
}

// Smith geometry function: combined shadowing-masking for both view and light
float G_Smith(float NdotV, float NdotL, float roughness) {
    return G_SchlickGGX(NdotV, roughness) * G_SchlickGGX(NdotL, roughness);
}

vec3 Fresnel_Schlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 sampleGGX(vec2 uv, vec3 normal, float roughness) {
    float a = roughness * roughness;

	vec2 rand = randVec2(uv);
    float phi = 2.0 * PI * rand.x;
	float cosTheta = sqrt((1.0 - rand.y) / (1.0 + (a - 1.0) * rand.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    // Tangent space vector
    vec3 H_tangent = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    // Transform to world space aligned with N
	// Build an orthonormal basis (TBN) around the normal
    vec3 tangent = normalize(abs(normal.x) > 0.1 ? cross(normal, vec3(0,1,0)) : cross(normal, vec3(1,0,0)));
    vec3 bitangent = cross(normal, tangent);
    
    // Transform sample to world space
    return normalize(H_tangent.x * tangent + H_tangent.y * bitangent + H_tangent.z * normal);
}

bool isOccluded(Ray shadowRay, float maxDist)
{
	for(int i=0; i < NUM_OBJECTS; i++) {
		Hittable object = objects[i];

		float hitDist;
		if(object.type == SPHERE)
			hitDist = hitSphere(spheres[object.index], shadowRay);

		if(hitDist > 0.0f || hitDist < maxDist)
			return true;
	}

	return false;
}

vec4 castRay(vec2 uv, Ray ray, uint numBounces)
{
	vec3 finalColor = vec3(0.0f);

	// how much light is carried through bounces
	vec3 throughput = vec3(1.0);

	for(int b=0; b < numBounces; b++) {
	    Hittable closestObj;
		float closestHitdist = 999999.0f;

		for(int i=0; i < NUM_OBJECTS; i++) {
			Hittable object = objects[i];

			float hitDist;
			if(object.type == SPHERE)
				hitDist = hitSphere(spheres[object.index], ray);

			// infront of camera and closer than closest
			if(hitDist > 0.0f && hitDist < closestHitdist) {
				closestHitdist = hitDist;
				closestObj = object;
			}
		}

		// failed intersection test
		if(closestHitdist == 999999.0f) {
			finalColor += vec3(texture(u_background, ray.dir * vec3(1.0f, -1.0f, 1.0f))) * throughput;
			break;
		}

		vec3 hitPos = ray.origin + ray.dir * closestHitdist;
		
		vec3 normal;
		if(closestObj.type == SPHERE)
			normal = hitSphereNormal(spheres[closestObj.index], hitPos);


		if(closestObj.matType == DIFFUSE) {
			DiffuseMaterial material = diffuseMaterials[closestObj.matIndex];

			// place ray at hitpoint + padding facing reflection
			ray.origin = hitPos + normal * 0.0001f;
			ray.dir = randHemisphereCosWeighted(uv + b, normal);
			
			vec3 brdf = material.albedo / PI;

			vec3 direct = vec3(0);
			for(int i=0; i < NUM_EMISSIVE_OBJECTS; i++) {
				Hittable object = objects[emissiveObjectIndexes[i]];
				EmissiveMaterial m = emissiveMaterials[object.matIndex];

				vec3 lightPos;
				vec3 lightNormal;
				float lightPdf;
				if(object.type == SPHERE) {
					lightPos = sampleSphereSurface(spheres[object.index]);
					lightPdf = 1.0f / (4 * PI * pow(spheres[object.index].radius, 2));
					lightNormal = normalize(lightPos - spheres[object.index].origin);
				}

				vec3 lightDir = lightPos - hitPos;
				vec3 lightDirNorm = normalize(lightDir);
				float dist = length(lightDir);

				Ray shadowRay = Ray(ray.origin, lightDirNorm);

				if(!isOccluded(shadowRay, dist - 0.001f)) {
					float cosTheta = max(dot(normal, lightDirNorm), 0.0);
					float pdfSolidAngle = lightPdf * pow(dist, 2) / max(dot(lightNormal, -lightDir), 0.0);

					direct += m.emission * cosTheta * brdf / pdfSolidAngle;
				}
			}

			finalColor += direct * throughput;

			/*
			since:	
			  BRDF = albedo / PI
			  PDF (of cos weighted sampling) = cos(theta) / PI
			rendering equation simplifies to just multiply albedo
			*/
			throughput *= material.albedo;
		}
		else if(closestObj.matType == EMISSIVE) {
			EmissiveMaterial material = emissiveMaterials[closestObj.matIndex];
			finalColor += material.emission * throughput;
			break;
		}
		else if(closestObj.matType == METALLIC) {
			MetallicMaterial material = metallicMaterials[closestObj.matIndex];

			vec3 viewDir = normalize(u_cameraPos - hitPos);
			float NdotV = max(dot(normal, viewDir), 0.0f);

			// place ray at hitpoint + padding facing reflection
			ray.origin = hitPos + normal * 0.0001f;

			vec3 reflectDir = reflect(-ray.dir, normal);
			vec3 H = sampleGGX(uv, normal, material.roughness);
			ray.dir = reflect(-viewDir, H);

			if(dot(ray.dir, normal) <= 0.0)
				ray.dir = reflectDir;

			vec3 specular = vec3(0.0f);
			for(int i=0; i < NUM_EMISSIVE_OBJECTS; i++) {
				Hittable object = objects[emissiveObjectIndexes[i]];
				EmissiveMaterial m = emissiveMaterials[object.matIndex];

				vec3 lightPos;
				vec3 lightNormal;
				float lightPdf;
				if(object.type == SPHERE) {
					lightPos = sampleSphereSurface(spheres[object.index]);
					lightPdf = 1.0f / (4 * PI * pow(spheres[object.index].radius, 2));
					lightNormal = normalize(lightPos - spheres[object.index].origin);
				}

				vec3 lightDir = normalize(lightPos - hitPos);

				vec3 halfwayVec = normalize(viewDir + lightDir);
				float NdotL = max(dot(normal, lightDir), 0.0f);
				float NdotH = max(dot(normal, halfwayVec), 0.0f);
				float VdotH = max(dot(viewDir, halfwayVec), 0.0f);

			    float dist = length(lightPos - hitPos);
				
				float pdfSolidAngle = lightPdf * pow(dist, 2) / max(dot(lightNormal, -lightDir), 0.0001f);
				
				vec3 numer = D_GGX(NdotH, material.roughness) * Fresnel_Schlick(VdotH, vec3(0.92f)) * G_Smith(NdotV, NdotL, material.roughness);
				float denom = max(4.0 * NdotV * NdotL, 0.0001f);
				vec3 brdf = numer / denom;
				specular += brdf * m.emission * NdotL / pdfSolidAngle;
			}

			finalColor += throughput * specular;
		}
	}

	return vec4(finalColor, 1.0f);
}

void main()
{
	vec2 uv = gl_GlobalInvocationID.xy / u_resolution * 2.0f - 1.0f;

	vec4 dir = vec4(uv, -1.0f, 1.0f) * inverse(u_cameraProj);
	dir /= dir.w;
	dir.w = 0;

	Ray ray = Ray(u_cameraPos, vec3(normalize(dir * inverse(u_cameraView))));

	vec4 avrg = ((u_frameCount - 1) * imageLoad(u_imgOutput, ivec2(gl_GlobalInvocationID.xy)) + castRay(uv, ray, 4)) / u_frameCount;
	imageStore(u_imgOutput, ivec2(gl_GlobalInvocationID.xy), avrg);
}